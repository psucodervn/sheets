// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

import "github.com/rs/xid"

func init() {
	addID := func(ctx context.Context, executor boil.ContextExecutor, transactionLog *TransactionLog) error {
		if len(transactionLog.ID) == 0 {
			transactionLog.ID = xid.New().String()
		}
		return nil
	}
	AddTransactionLogHook(boil.BeforeInsertHook, addID)
	AddTransactionLogHook(boil.BeforeUpdateHook, addID)
	AddTransactionLogHook(boil.BeforeUpsertHook, addID)
}

// TransactionLog is an object representing the database table.
type TransactionLog struct {
	ID            string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	TransactionID string    `boil:"transaction_id" json:"transactionID" toml:"transactionID" yaml:"transactionID"`
	ActorID       string    `boil:"actor_id" json:"actorID" toml:"actorID" yaml:"actorID"`
	Action        Action    `boil:"action" json:"action" toml:"action" yaml:"action"`
	Time          time.Time `boil:"time" json:"time" toml:"time" yaml:"time"`
	Meta          Meta      `boil:"meta" json:"meta" toml:"meta" yaml:"meta"`

	R *transactionLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transactionLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransactionLogColumns = struct {
	ID            string
	TransactionID string
	ActorID       string
	Action        string
	Time          string
	Meta          string
}{
	ID:            "id",
	TransactionID: "transaction_id",
	ActorID:       "actor_id",
	Action:        "action",
	Time:          "time",
	Meta:          "meta",
}

// Generated where

type whereHelperAction struct{ field string }

func (w whereHelperAction) EQ(x Action) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperAction) NEQ(x Action) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperAction) LT(x Action) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperAction) LTE(x Action) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperAction) GT(x Action) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperAction) GTE(x Action) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperMeta struct{ field string }

func (w whereHelperMeta) EQ(x Meta) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperMeta) NEQ(x Meta) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperMeta) LT(x Meta) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperMeta) LTE(x Meta) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperMeta) GT(x Meta) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperMeta) GTE(x Meta) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var TransactionLogWhere = struct {
	ID            whereHelperstring
	TransactionID whereHelperstring
	ActorID       whereHelperstring
	Action        whereHelperAction
	Time          whereHelpertime_Time
	Meta          whereHelperMeta
}{
	ID:            whereHelperstring{field: "\"transaction_logs\".\"id\""},
	TransactionID: whereHelperstring{field: "\"transaction_logs\".\"transaction_id\""},
	ActorID:       whereHelperstring{field: "\"transaction_logs\".\"actor_id\""},
	Action:        whereHelperAction{field: "\"transaction_logs\".\"action\""},
	Time:          whereHelpertime_Time{field: "\"transaction_logs\".\"time\""},
	Meta:          whereHelperMeta{field: "\"transaction_logs\".\"meta\""},
}

// TransactionLogRels is where relationship names are stored.
var TransactionLogRels = struct {
	Actor       string
	Transaction string
}{
	Actor:       "Actor",
	Transaction: "Transaction",
}

// transactionLogR is where relationships are stored.
type transactionLogR struct {
	Actor       *User
	Transaction *Transaction
}

// NewStruct creates a new relationship struct
func (*transactionLogR) NewStruct() *transactionLogR {
	return &transactionLogR{}
}

// transactionLogL is where Load methods for each relationship are stored.
type transactionLogL struct{}

var (
	transactionLogAllColumns            = []string{"id", "transaction_id", "actor_id", "action", "time", "meta"}
	transactionLogColumnsWithoutDefault = []string{"id", "transaction_id", "actor_id", "action", "time"}
	transactionLogColumnsWithDefault    = []string{"meta"}
	transactionLogPrimaryKeyColumns     = []string{"id"}
)

type (
	// TransactionLogSlice is an alias for a slice of pointers to TransactionLog.
	// This should generally be used opposed to []TransactionLog.
	TransactionLogSlice []*TransactionLog
	// TransactionLogHook is the signature for custom TransactionLog hook methods
	TransactionLogHook func(context.Context, boil.ContextExecutor, *TransactionLog) error

	transactionLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transactionLogType                 = reflect.TypeOf(&TransactionLog{})
	transactionLogMapping              = queries.MakeStructMapping(transactionLogType)
	transactionLogPrimaryKeyMapping, _ = queries.BindMapping(transactionLogType, transactionLogMapping, transactionLogPrimaryKeyColumns)
	transactionLogInsertCacheMut       sync.RWMutex
	transactionLogInsertCache          = make(map[string]insertCache)
	transactionLogUpdateCacheMut       sync.RWMutex
	transactionLogUpdateCache          = make(map[string]updateCache)
	transactionLogUpsertCacheMut       sync.RWMutex
	transactionLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var transactionLogBeforeInsertHooks []TransactionLogHook
var transactionLogBeforeUpdateHooks []TransactionLogHook
var transactionLogBeforeDeleteHooks []TransactionLogHook
var transactionLogBeforeUpsertHooks []TransactionLogHook

var transactionLogAfterInsertHooks []TransactionLogHook
var transactionLogAfterSelectHooks []TransactionLogHook
var transactionLogAfterUpdateHooks []TransactionLogHook
var transactionLogAfterDeleteHooks []TransactionLogHook
var transactionLogAfterUpsertHooks []TransactionLogHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TransactionLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TransactionLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TransactionLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TransactionLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TransactionLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TransactionLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TransactionLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TransactionLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TransactionLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTransactionLogHook registers your hook function for all future operations.
func AddTransactionLogHook(hookPoint boil.HookPoint, transactionLogHook TransactionLogHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		transactionLogBeforeInsertHooks = append(transactionLogBeforeInsertHooks, transactionLogHook)
	case boil.BeforeUpdateHook:
		transactionLogBeforeUpdateHooks = append(transactionLogBeforeUpdateHooks, transactionLogHook)
	case boil.BeforeDeleteHook:
		transactionLogBeforeDeleteHooks = append(transactionLogBeforeDeleteHooks, transactionLogHook)
	case boil.BeforeUpsertHook:
		transactionLogBeforeUpsertHooks = append(transactionLogBeforeUpsertHooks, transactionLogHook)
	case boil.AfterInsertHook:
		transactionLogAfterInsertHooks = append(transactionLogAfterInsertHooks, transactionLogHook)
	case boil.AfterSelectHook:
		transactionLogAfterSelectHooks = append(transactionLogAfterSelectHooks, transactionLogHook)
	case boil.AfterUpdateHook:
		transactionLogAfterUpdateHooks = append(transactionLogAfterUpdateHooks, transactionLogHook)
	case boil.AfterDeleteHook:
		transactionLogAfterDeleteHooks = append(transactionLogAfterDeleteHooks, transactionLogHook)
	case boil.AfterUpsertHook:
		transactionLogAfterUpsertHooks = append(transactionLogAfterUpsertHooks, transactionLogHook)
	}
}

// OneG returns a single transactionLog record from the query using the global executor.
func (q transactionLogQuery) OneG(ctx context.Context) (*TransactionLog, error) {
	return q.One(ctx, boil.GetContextDB())
}

// OneGP returns a single transactionLog record from the query using the global executor, and panics on error.
func (q transactionLogQuery) OneGP(ctx context.Context) *TransactionLog {
	o, err := q.One(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single transactionLog record from the query, and panics on error.
func (q transactionLogQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *TransactionLog {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single transactionLog record from the query.
func (q transactionLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TransactionLog, error) {
	o := &TransactionLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for transaction_logs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TransactionLog records from the query using the global executor.
func (q transactionLogQuery) AllG(ctx context.Context) (TransactionLogSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// AllGP returns all TransactionLog records from the query using the global executor, and panics on error.
func (q transactionLogQuery) AllGP(ctx context.Context) TransactionLogSlice {
	o, err := q.All(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all TransactionLog records from the query, and panics on error.
func (q transactionLogQuery) AllP(ctx context.Context, exec boil.ContextExecutor) TransactionLogSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all TransactionLog records from the query.
func (q transactionLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (TransactionLogSlice, error) {
	var o []*TransactionLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to TransactionLog slice")
	}

	if len(transactionLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TransactionLog records in the query, and panics on error.
func (q transactionLogQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// CountGP returns the count of all TransactionLog records in the query using the global executor, and panics on error.
func (q transactionLogQuery) CountGP(ctx context.Context) int64 {
	c, err := q.Count(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all TransactionLog records in the query, and panics on error.
func (q transactionLogQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all TransactionLog records in the query.
func (q transactionLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count transaction_logs rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q transactionLogQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q transactionLogQuery) ExistsGP(ctx context.Context) bool {
	e, err := q.Exists(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q transactionLogQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q transactionLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if transaction_logs exists")
	}

	return count > 0, nil
}

// Actor pointed to by the foreign key.
func (o *TransactionLog) Actor(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ActorID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Transaction pointed to by the foreign key.
func (o *TransactionLog) Transaction(mods ...qm.QueryMod) transactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TransactionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Transactions(queryMods...)
	queries.SetFrom(query.Query, "\"transactions\"")

	return query
}

// LoadActor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionLogL) LoadActor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransactionLog interface{}, mods queries.Applicator) error {
	var slice []*TransactionLog
	var object *TransactionLog

	if singular {
		object = maybeTransactionLog.(*TransactionLog)
	} else {
		slice = *maybeTransactionLog.(*[]*TransactionLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionLogR{}
		}
		args = append(args, object.ActorID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionLogR{}
			}

			for _, a := range args {
				if a == obj.ActorID {
					continue Outer
				}
			}

			args = append(args, obj.ActorID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(transactionLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Actor = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ActorTransactionLogs = append(foreign.R.ActorTransactionLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ActorID == foreign.ID {
				local.R.Actor = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ActorTransactionLogs = append(foreign.R.ActorTransactionLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionLogL) LoadTransaction(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransactionLog interface{}, mods queries.Applicator) error {
	var slice []*TransactionLog
	var object *TransactionLog

	if singular {
		object = maybeTransactionLog.(*TransactionLog)
	} else {
		slice = *maybeTransactionLog.(*[]*TransactionLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionLogR{}
		}
		args = append(args, object.TransactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionLogR{}
			}

			for _, a := range args {
				if a == obj.TransactionID {
					continue Outer
				}
			}

			args = append(args, obj.TransactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`transactions`),
		qm.WhereIn(`transactions.id in ?`, args...),
		qmhelper.WhereIsNull(`transactions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transaction")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if len(transactionLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Transaction = foreign
		if foreign.R == nil {
			foreign.R = &transactionR{}
		}
		foreign.R.TransactionLogs = append(foreign.R.TransactionLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionID == foreign.ID {
				local.R.Transaction = foreign
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.TransactionLogs = append(foreign.R.TransactionLogs, local)
				break
			}
		}
	}

	return nil
}

// SetActorG of the transactionLog to the related item.
// Sets o.R.Actor to related.
// Adds o to related.R.ActorTransactionLogs.
// Uses the global database handle.
func (o *TransactionLog) SetActorG(ctx context.Context, insert bool, related *User) error {
	return o.SetActor(ctx, boil.GetContextDB(), insert, related)
}

// SetActorP of the transactionLog to the related item.
// Sets o.R.Actor to related.
// Adds o to related.R.ActorTransactionLogs.
// Panics on error.
func (o *TransactionLog) SetActorP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) {
	if err := o.SetActor(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetActorGP of the transactionLog to the related item.
// Sets o.R.Actor to related.
// Adds o to related.R.ActorTransactionLogs.
// Uses the global database handle and panics on error.
func (o *TransactionLog) SetActorGP(ctx context.Context, insert bool, related *User) {
	if err := o.SetActor(ctx, boil.GetContextDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetActor of the transactionLog to the related item.
// Sets o.R.Actor to related.
// Adds o to related.R.ActorTransactionLogs.
func (o *TransactionLog) SetActor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transaction_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"actor_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ActorID = related.ID
	if o.R == nil {
		o.R = &transactionLogR{
			Actor: related,
		}
	} else {
		o.R.Actor = related
	}

	if related.R == nil {
		related.R = &userR{
			ActorTransactionLogs: TransactionLogSlice{o},
		}
	} else {
		related.R.ActorTransactionLogs = append(related.R.ActorTransactionLogs, o)
	}

	return nil
}

// SetTransactionG of the transactionLog to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionLogs.
// Uses the global database handle.
func (o *TransactionLog) SetTransactionG(ctx context.Context, insert bool, related *Transaction) error {
	return o.SetTransaction(ctx, boil.GetContextDB(), insert, related)
}

// SetTransactionP of the transactionLog to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionLogs.
// Panics on error.
func (o *TransactionLog) SetTransactionP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Transaction) {
	if err := o.SetTransaction(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactionGP of the transactionLog to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionLogs.
// Uses the global database handle and panics on error.
func (o *TransactionLog) SetTransactionGP(ctx context.Context, insert bool, related *Transaction) {
	if err := o.SetTransaction(ctx, boil.GetContextDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransaction of the transactionLog to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionLogs.
func (o *TransactionLog) SetTransaction(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transaction_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"transaction_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransactionID = related.ID
	if o.R == nil {
		o.R = &transactionLogR{
			Transaction: related,
		}
	} else {
		o.R.Transaction = related
	}

	if related.R == nil {
		related.R = &transactionR{
			TransactionLogs: TransactionLogSlice{o},
		}
	} else {
		related.R.TransactionLogs = append(related.R.TransactionLogs, o)
	}

	return nil
}

// TransactionLogs retrieves all the records using an executor.
func TransactionLogs(mods ...qm.QueryMod) transactionLogQuery {
	mods = append(mods, qm.From("\"transaction_logs\""))
	return transactionLogQuery{NewQuery(mods...)}
}

// FindTransactionLogG retrieves a single record by ID.
func FindTransactionLogG(ctx context.Context, iD string, selectCols ...string) (*TransactionLog, error) {
	return FindTransactionLog(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTransactionLogP retrieves a single record by ID with an executor, and panics on error.
func FindTransactionLogP(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) *TransactionLog {
	retobj, err := FindTransactionLog(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTransactionLogGP retrieves a single record by ID, and panics on error.
func FindTransactionLogGP(ctx context.Context, iD string, selectCols ...string) *TransactionLog {
	retobj, err := FindTransactionLog(ctx, boil.GetContextDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTransactionLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransactionLog(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*TransactionLog, error) {
	transactionLogObj := &TransactionLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"transaction_logs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, transactionLogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from transaction_logs")
	}

	return transactionLogObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TransactionLog) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *TransactionLog) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *TransactionLog) InsertGP(ctx context.Context, columns boil.Columns) {
	if err := o.Insert(ctx, boil.GetContextDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TransactionLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no transaction_logs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transactionLogInsertCacheMut.RLock()
	cache, cached := transactionLogInsertCache[key]
	transactionLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transactionLogAllColumns,
			transactionLogColumnsWithDefault,
			transactionLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transactionLogType, transactionLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transactionLogType, transactionLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"transaction_logs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"transaction_logs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into transaction_logs")
	}

	if !cached {
		transactionLogInsertCacheMut.Lock()
		transactionLogInsertCache[key] = cache
		transactionLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TransactionLog record using the global executor.
// See Update for more documentation.
func (o *TransactionLog) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// UpdateP uses an executor to update the TransactionLog, and panics on error.
// See Update for more documentation.
func (o *TransactionLog) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single TransactionLog record using the global executor. Panics on error.
// See Update for more documentation.
func (o *TransactionLog) UpdateGP(ctx context.Context, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, boil.GetContextDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the TransactionLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TransactionLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	transactionLogUpdateCacheMut.RLock()
	cache, cached := transactionLogUpdateCache[key]
	transactionLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transactionLogAllColumns,
			transactionLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update transaction_logs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"transaction_logs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, transactionLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transactionLogType, transactionLogMapping, append(wl, transactionLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update transaction_logs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for transaction_logs")
	}

	if !cached {
		transactionLogUpdateCacheMut.Lock()
		transactionLogUpdateCache[key] = cache
		transactionLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q transactionLogQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q transactionLogQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q transactionLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for transaction_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for transaction_logs")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TransactionLogSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TransactionLogSlice) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TransactionLogSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransactionLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"transaction_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, transactionLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in transactionLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all transactionLog")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TransactionLog) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *TransactionLog) UpsertGP(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *TransactionLog) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TransactionLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no transaction_logs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transactionLogUpsertCacheMut.RLock()
	cache, cached := transactionLogUpsertCache[key]
	transactionLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			transactionLogAllColumns,
			transactionLogColumnsWithDefault,
			transactionLogColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			transactionLogAllColumns,
			transactionLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert transaction_logs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(transactionLogPrimaryKeyColumns))
			copy(conflict, transactionLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"transaction_logs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(transactionLogType, transactionLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transactionLogType, transactionLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert transaction_logs")
	}

	if !cached {
		transactionLogUpsertCacheMut.Lock()
		transactionLogUpsertCache[key] = cache
		transactionLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TransactionLog record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TransactionLog) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// DeleteP deletes a single TransactionLog record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *TransactionLog) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single TransactionLog record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *TransactionLog) DeleteGP(ctx context.Context) int64 {
	rowsAff, err := o.Delete(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single TransactionLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TransactionLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no TransactionLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transactionLogPrimaryKeyMapping)
	sql := "DELETE FROM \"transaction_logs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from transaction_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for transaction_logs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q transactionLogQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q transactionLogQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q transactionLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no transactionLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from transaction_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for transaction_logs")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TransactionLogSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TransactionLogSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TransactionLogSlice) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := o.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransactionLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(transactionLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"transaction_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactionLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from transactionLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for transaction_logs")
	}

	if len(transactionLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TransactionLog) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("model: no TransactionLog provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *TransactionLog) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *TransactionLog) ReloadGP(ctx context.Context) {
	if err := o.Reload(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TransactionLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTransactionLog(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionLogSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("model: empty TransactionLogSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TransactionLogSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TransactionLogSlice) ReloadAllGP(ctx context.Context) {
	if err := o.ReloadAll(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransactionLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"transaction_logs\".* FROM \"transaction_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactionLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in TransactionLogSlice")
	}

	*o = slice

	return nil
}

// TransactionLogExistsG checks if the TransactionLog row exists.
func TransactionLogExistsG(ctx context.Context, iD string) (bool, error) {
	return TransactionLogExists(ctx, boil.GetContextDB(), iD)
}

// TransactionLogExistsP checks if the TransactionLog row exists. Panics on error.
func TransactionLogExistsP(ctx context.Context, exec boil.ContextExecutor, iD string) bool {
	e, err := TransactionLogExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TransactionLogExistsGP checks if the TransactionLog row exists. Panics on error.
func TransactionLogExistsGP(ctx context.Context, iD string) bool {
	e, err := TransactionLogExists(ctx, boil.GetContextDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TransactionLogExists checks if the TransactionLog row exists.
func TransactionLogExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"transaction_logs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if transaction_logs exists")
	}

	return exists, nil
}
