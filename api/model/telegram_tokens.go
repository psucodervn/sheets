// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TelegramToken is an object representing the database table.
type TelegramToken struct {
	Token     string    `boil:"token" json:"token" toml:"token" yaml:"token"`
	CreatedAt time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	ExpireAt  time.Time `boil:"expire_at" json:"expireAt" toml:"expireAt" yaml:"expireAt"`
	UserID    string    `boil:"user_id" json:"userID" toml:"userID" yaml:"userID"`

	R *telegramTokenR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L telegramTokenL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TelegramTokenColumns = struct {
	Token     string
	CreatedAt string
	ExpireAt  string
	UserID    string
}{
	Token:     "token",
	CreatedAt: "created_at",
	ExpireAt:  "expire_at",
	UserID:    "user_id",
}

// Generated where

var TelegramTokenWhere = struct {
	Token     whereHelperstring
	CreatedAt whereHelpertime_Time
	ExpireAt  whereHelpertime_Time
	UserID    whereHelperstring
}{
	Token:     whereHelperstring{field: "\"telegram_tokens\".\"token\""},
	CreatedAt: whereHelpertime_Time{field: "\"telegram_tokens\".\"created_at\""},
	ExpireAt:  whereHelpertime_Time{field: "\"telegram_tokens\".\"expire_at\""},
	UserID:    whereHelperstring{field: "\"telegram_tokens\".\"user_id\""},
}

// TelegramTokenRels is where relationship names are stored.
var TelegramTokenRels = struct {
	User string
}{
	User: "User",
}

// telegramTokenR is where relationships are stored.
type telegramTokenR struct {
	User *User
}

// NewStruct creates a new relationship struct
func (*telegramTokenR) NewStruct() *telegramTokenR {
	return &telegramTokenR{}
}

// telegramTokenL is where Load methods for each relationship are stored.
type telegramTokenL struct{}

var (
	telegramTokenAllColumns            = []string{"token", "created_at", "expire_at", "user_id"}
	telegramTokenColumnsWithoutDefault = []string{"token", "created_at", "expire_at", "user_id"}
	telegramTokenColumnsWithDefault    = []string{}
	telegramTokenPrimaryKeyColumns     = []string{"token"}
)

type (
	// TelegramTokenSlice is an alias for a slice of pointers to TelegramToken.
	// This should generally be used opposed to []TelegramToken.
	TelegramTokenSlice []*TelegramToken
	// TelegramTokenHook is the signature for custom TelegramToken hook methods
	TelegramTokenHook func(context.Context, boil.ContextExecutor, *TelegramToken) error

	telegramTokenQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	telegramTokenType                 = reflect.TypeOf(&TelegramToken{})
	telegramTokenMapping              = queries.MakeStructMapping(telegramTokenType)
	telegramTokenPrimaryKeyMapping, _ = queries.BindMapping(telegramTokenType, telegramTokenMapping, telegramTokenPrimaryKeyColumns)
	telegramTokenInsertCacheMut       sync.RWMutex
	telegramTokenInsertCache          = make(map[string]insertCache)
	telegramTokenUpdateCacheMut       sync.RWMutex
	telegramTokenUpdateCache          = make(map[string]updateCache)
	telegramTokenUpsertCacheMut       sync.RWMutex
	telegramTokenUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var telegramTokenBeforeInsertHooks []TelegramTokenHook
var telegramTokenBeforeUpdateHooks []TelegramTokenHook
var telegramTokenBeforeDeleteHooks []TelegramTokenHook
var telegramTokenBeforeUpsertHooks []TelegramTokenHook

var telegramTokenAfterInsertHooks []TelegramTokenHook
var telegramTokenAfterSelectHooks []TelegramTokenHook
var telegramTokenAfterUpdateHooks []TelegramTokenHook
var telegramTokenAfterDeleteHooks []TelegramTokenHook
var telegramTokenAfterUpsertHooks []TelegramTokenHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TelegramToken) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range telegramTokenBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TelegramToken) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range telegramTokenBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TelegramToken) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range telegramTokenBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TelegramToken) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range telegramTokenBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TelegramToken) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range telegramTokenAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TelegramToken) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range telegramTokenAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TelegramToken) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range telegramTokenAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TelegramToken) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range telegramTokenAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TelegramToken) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range telegramTokenAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTelegramTokenHook registers your hook function for all future operations.
func AddTelegramTokenHook(hookPoint boil.HookPoint, telegramTokenHook TelegramTokenHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		telegramTokenBeforeInsertHooks = append(telegramTokenBeforeInsertHooks, telegramTokenHook)
	case boil.BeforeUpdateHook:
		telegramTokenBeforeUpdateHooks = append(telegramTokenBeforeUpdateHooks, telegramTokenHook)
	case boil.BeforeDeleteHook:
		telegramTokenBeforeDeleteHooks = append(telegramTokenBeforeDeleteHooks, telegramTokenHook)
	case boil.BeforeUpsertHook:
		telegramTokenBeforeUpsertHooks = append(telegramTokenBeforeUpsertHooks, telegramTokenHook)
	case boil.AfterInsertHook:
		telegramTokenAfterInsertHooks = append(telegramTokenAfterInsertHooks, telegramTokenHook)
	case boil.AfterSelectHook:
		telegramTokenAfterSelectHooks = append(telegramTokenAfterSelectHooks, telegramTokenHook)
	case boil.AfterUpdateHook:
		telegramTokenAfterUpdateHooks = append(telegramTokenAfterUpdateHooks, telegramTokenHook)
	case boil.AfterDeleteHook:
		telegramTokenAfterDeleteHooks = append(telegramTokenAfterDeleteHooks, telegramTokenHook)
	case boil.AfterUpsertHook:
		telegramTokenAfterUpsertHooks = append(telegramTokenAfterUpsertHooks, telegramTokenHook)
	}
}

// OneG returns a single telegramToken record from the query using the global executor.
func (q telegramTokenQuery) OneG(ctx context.Context) (*TelegramToken, error) {
	return q.One(ctx, boil.GetContextDB())
}

// OneGP returns a single telegramToken record from the query using the global executor, and panics on error.
func (q telegramTokenQuery) OneGP(ctx context.Context) *TelegramToken {
	o, err := q.One(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single telegramToken record from the query, and panics on error.
func (q telegramTokenQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *TelegramToken {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single telegramToken record from the query.
func (q telegramTokenQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TelegramToken, error) {
	o := &TelegramToken{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for telegram_tokens")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TelegramToken records from the query using the global executor.
func (q telegramTokenQuery) AllG(ctx context.Context) (TelegramTokenSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// AllGP returns all TelegramToken records from the query using the global executor, and panics on error.
func (q telegramTokenQuery) AllGP(ctx context.Context) TelegramTokenSlice {
	o, err := q.All(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all TelegramToken records from the query, and panics on error.
func (q telegramTokenQuery) AllP(ctx context.Context, exec boil.ContextExecutor) TelegramTokenSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all TelegramToken records from the query.
func (q telegramTokenQuery) All(ctx context.Context, exec boil.ContextExecutor) (TelegramTokenSlice, error) {
	var o []*TelegramToken

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to TelegramToken slice")
	}

	if len(telegramTokenAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TelegramToken records in the query, and panics on error.
func (q telegramTokenQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// CountGP returns the count of all TelegramToken records in the query using the global executor, and panics on error.
func (q telegramTokenQuery) CountGP(ctx context.Context) int64 {
	c, err := q.Count(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all TelegramToken records in the query, and panics on error.
func (q telegramTokenQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all TelegramToken records in the query.
func (q telegramTokenQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count telegram_tokens rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q telegramTokenQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q telegramTokenQuery) ExistsGP(ctx context.Context) bool {
	e, err := q.Exists(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q telegramTokenQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q telegramTokenQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if telegram_tokens exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *TelegramToken) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (telegramTokenL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTelegramToken interface{}, mods queries.Applicator) error {
	var slice []*TelegramToken
	var object *TelegramToken

	if singular {
		object = maybeTelegramToken.(*TelegramToken)
	} else {
		slice = *maybeTelegramToken.(*[]*TelegramToken)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &telegramTokenR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &telegramTokenR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(telegramTokenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.TelegramTokens = append(foreign.R.TelegramTokens, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.TelegramTokens = append(foreign.R.TelegramTokens, local)
				break
			}
		}
	}

	return nil
}

// SetUserG of the telegramToken to the related item.
// Sets o.R.User to related.
// Adds o to related.R.TelegramTokens.
// Uses the global database handle.
func (o *TelegramToken) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUserP of the telegramToken to the related item.
// Sets o.R.User to related.
// Adds o to related.R.TelegramTokens.
// Panics on error.
func (o *TelegramToken) SetUserP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) {
	if err := o.SetUser(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserGP of the telegramToken to the related item.
// Sets o.R.User to related.
// Adds o to related.R.TelegramTokens.
// Uses the global database handle and panics on error.
func (o *TelegramToken) SetUserGP(ctx context.Context, insert bool, related *User) {
	if err := o.SetUser(ctx, boil.GetContextDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the telegramToken to the related item.
// Sets o.R.User to related.
// Adds o to related.R.TelegramTokens.
func (o *TelegramToken) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"telegram_tokens\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, telegramTokenPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Token}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &telegramTokenR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			TelegramTokens: TelegramTokenSlice{o},
		}
	} else {
		related.R.TelegramTokens = append(related.R.TelegramTokens, o)
	}

	return nil
}

// TelegramTokens retrieves all the records using an executor.
func TelegramTokens(mods ...qm.QueryMod) telegramTokenQuery {
	mods = append(mods, qm.From("\"telegram_tokens\""))
	return telegramTokenQuery{NewQuery(mods...)}
}

// FindTelegramTokenG retrieves a single record by ID.
func FindTelegramTokenG(ctx context.Context, token string, selectCols ...string) (*TelegramToken, error) {
	return FindTelegramToken(ctx, boil.GetContextDB(), token, selectCols...)
}

// FindTelegramTokenP retrieves a single record by ID with an executor, and panics on error.
func FindTelegramTokenP(ctx context.Context, exec boil.ContextExecutor, token string, selectCols ...string) *TelegramToken {
	retobj, err := FindTelegramToken(ctx, exec, token, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTelegramTokenGP retrieves a single record by ID, and panics on error.
func FindTelegramTokenGP(ctx context.Context, token string, selectCols ...string) *TelegramToken {
	retobj, err := FindTelegramToken(ctx, boil.GetContextDB(), token, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTelegramToken retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTelegramToken(ctx context.Context, exec boil.ContextExecutor, token string, selectCols ...string) (*TelegramToken, error) {
	telegramTokenObj := &TelegramToken{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"telegram_tokens\" where \"token\"=$1", sel,
	)

	q := queries.Raw(query, token)

	err := q.Bind(ctx, exec, telegramTokenObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from telegram_tokens")
	}

	return telegramTokenObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TelegramToken) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *TelegramToken) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *TelegramToken) InsertGP(ctx context.Context, columns boil.Columns) {
	if err := o.Insert(ctx, boil.GetContextDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TelegramToken) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no telegram_tokens provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(telegramTokenColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	telegramTokenInsertCacheMut.RLock()
	cache, cached := telegramTokenInsertCache[key]
	telegramTokenInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			telegramTokenAllColumns,
			telegramTokenColumnsWithDefault,
			telegramTokenColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(telegramTokenType, telegramTokenMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(telegramTokenType, telegramTokenMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"telegram_tokens\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"telegram_tokens\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into telegram_tokens")
	}

	if !cached {
		telegramTokenInsertCacheMut.Lock()
		telegramTokenInsertCache[key] = cache
		telegramTokenInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TelegramToken record using the global executor.
// See Update for more documentation.
func (o *TelegramToken) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// UpdateP uses an executor to update the TelegramToken, and panics on error.
// See Update for more documentation.
func (o *TelegramToken) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single TelegramToken record using the global executor. Panics on error.
// See Update for more documentation.
func (o *TelegramToken) UpdateGP(ctx context.Context, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, boil.GetContextDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the TelegramToken.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TelegramToken) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	telegramTokenUpdateCacheMut.RLock()
	cache, cached := telegramTokenUpdateCache[key]
	telegramTokenUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			telegramTokenAllColumns,
			telegramTokenPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update telegram_tokens, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"telegram_tokens\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, telegramTokenPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(telegramTokenType, telegramTokenMapping, append(wl, telegramTokenPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update telegram_tokens row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for telegram_tokens")
	}

	if !cached {
		telegramTokenUpdateCacheMut.Lock()
		telegramTokenUpdateCache[key] = cache
		telegramTokenUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q telegramTokenQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q telegramTokenQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q telegramTokenQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for telegram_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for telegram_tokens")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TelegramTokenSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TelegramTokenSlice) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TelegramTokenSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TelegramTokenSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), telegramTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"telegram_tokens\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, telegramTokenPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in telegramToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all telegramToken")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TelegramToken) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *TelegramToken) UpsertGP(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *TelegramToken) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TelegramToken) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no telegram_tokens provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(telegramTokenColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	telegramTokenUpsertCacheMut.RLock()
	cache, cached := telegramTokenUpsertCache[key]
	telegramTokenUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			telegramTokenAllColumns,
			telegramTokenColumnsWithDefault,
			telegramTokenColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			telegramTokenAllColumns,
			telegramTokenPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert telegram_tokens, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(telegramTokenPrimaryKeyColumns))
			copy(conflict, telegramTokenPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"telegram_tokens\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(telegramTokenType, telegramTokenMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(telegramTokenType, telegramTokenMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert telegram_tokens")
	}

	if !cached {
		telegramTokenUpsertCacheMut.Lock()
		telegramTokenUpsertCache[key] = cache
		telegramTokenUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TelegramToken record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TelegramToken) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// DeleteP deletes a single TelegramToken record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *TelegramToken) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single TelegramToken record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *TelegramToken) DeleteGP(ctx context.Context) int64 {
	rowsAff, err := o.Delete(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single TelegramToken record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TelegramToken) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no TelegramToken provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), telegramTokenPrimaryKeyMapping)
	sql := "DELETE FROM \"telegram_tokens\" WHERE \"token\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from telegram_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for telegram_tokens")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q telegramTokenQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q telegramTokenQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q telegramTokenQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no telegramTokenQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from telegram_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for telegram_tokens")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TelegramTokenSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TelegramTokenSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TelegramTokenSlice) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := o.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TelegramTokenSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(telegramTokenBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), telegramTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"telegram_tokens\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, telegramTokenPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from telegramToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for telegram_tokens")
	}

	if len(telegramTokenAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TelegramToken) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("model: no TelegramToken provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *TelegramToken) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *TelegramToken) ReloadGP(ctx context.Context) {
	if err := o.Reload(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TelegramToken) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTelegramToken(ctx, exec, o.Token)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TelegramTokenSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("model: empty TelegramTokenSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TelegramTokenSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TelegramTokenSlice) ReloadAllGP(ctx context.Context) {
	if err := o.ReloadAll(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TelegramTokenSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TelegramTokenSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), telegramTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"telegram_tokens\".* FROM \"telegram_tokens\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, telegramTokenPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in TelegramTokenSlice")
	}

	*o = slice

	return nil
}

// TelegramTokenExistsG checks if the TelegramToken row exists.
func TelegramTokenExistsG(ctx context.Context, token string) (bool, error) {
	return TelegramTokenExists(ctx, boil.GetContextDB(), token)
}

// TelegramTokenExistsP checks if the TelegramToken row exists. Panics on error.
func TelegramTokenExistsP(ctx context.Context, exec boil.ContextExecutor, token string) bool {
	e, err := TelegramTokenExists(ctx, exec, token)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TelegramTokenExistsGP checks if the TelegramToken row exists. Panics on error.
func TelegramTokenExistsGP(ctx context.Context, token string) bool {
	e, err := TelegramTokenExists(ctx, boil.GetContextDB(), token)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TelegramTokenExists checks if the TelegramToken row exists.
func TelegramTokenExists(ctx context.Context, exec boil.ContextExecutor, token string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"telegram_tokens\" where \"token\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, token)
	}
	row := exec.QueryRowContext(ctx, sql, token)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if telegram_tokens exists")
	}

	return exists, nil
}
