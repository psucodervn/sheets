// Code generated by verigo. DO NOT EDIT.

package config

import (
	"github.com/kelseyhightower/envconfig"
	"github.com/rs/zerolog/log"
)

// ReadAuthConfig reads AuthConfig from env
func ReadAuthConfig(prefix ...string) (AuthConfig, error) {
	p := ""
	if len(prefix) > 0 {
		p = prefix[0]
	}
	var cfg AuthConfig
	err := envconfig.Process(p, &cfg)
	return cfg, err
}

// MustReadAuthConfig reads AuthConfig from env, panic if error
func MustReadAuthConfig(prefix ...string) AuthConfig {
	cfg, err := ReadAuthConfig(prefix...)
	if err != nil {
		log.Fatal().Err(err).Send()
	}
	return cfg
}

// ReadGoogleAuthConfig reads GoogleAuthConfig from env
func ReadGoogleAuthConfig(prefix ...string) (GoogleAuthConfig, error) {
	p := ""
	if len(prefix) > 0 {
		p = prefix[0]
	}
	var cfg GoogleAuthConfig
	err := envconfig.Process(p, &cfg)
	return cfg, err
}

// MustReadGoogleAuthConfig reads GoogleAuthConfig from env, panic if error
func MustReadGoogleAuthConfig(prefix ...string) GoogleAuthConfig {
	cfg, err := ReadGoogleAuthConfig(prefix...)
	if err != nil {
		log.Fatal().Err(err).Send()
	}
	return cfg
}

// ReadJiraConfig reads JiraConfig from env
func ReadJiraConfig(prefix ...string) (JiraConfig, error) {
	p := ""
	if len(prefix) > 0 {
		p = prefix[0]
	}
	var cfg JiraConfig
	err := envconfig.Process(p, &cfg)
	return cfg, err
}

// MustReadJiraConfig reads JiraConfig from env, panic if error
func MustReadJiraConfig(prefix ...string) JiraConfig {
	cfg, err := ReadJiraConfig(prefix...)
	if err != nil {
		log.Fatal().Err(err).Send()
	}
	return cfg
}

// ReadMigrationConfig reads MigrationConfig from env
func ReadMigrationConfig(prefix ...string) (MigrationConfig, error) {
	p := ""
	if len(prefix) > 0 {
		p = prefix[0]
	}
	var cfg MigrationConfig
	err := envconfig.Process(p, &cfg)
	return cfg, err
}

// MustReadMigrationConfig reads MigrationConfig from env, panic if error
func MustReadMigrationConfig(prefix ...string) MigrationConfig {
	cfg, err := ReadMigrationConfig(prefix...)
	if err != nil {
		log.Fatal().Err(err).Send()
	}
	return cfg
}

// ReadImporterConfig reads ImporterConfig from env
func ReadImporterConfig(prefix ...string) (ImporterConfig, error) {
	p := ""
	if len(prefix) > 0 {
		p = prefix[0]
	}
	var cfg ImporterConfig
	err := envconfig.Process(p, &cfg)
	return cfg, err
}

// MustReadImporterConfig reads ImporterConfig from env, panic if error
func MustReadImporterConfig(prefix ...string) ImporterConfig {
	cfg, err := ReadImporterConfig(prefix...)
	if err != nil {
		log.Fatal().Err(err).Send()
	}
	return cfg
}

// ReadWakatimeConfig reads WakatimeConfig from env
func ReadWakatimeConfig(prefix ...string) (WakatimeConfig, error) {
	p := ""
	if len(prefix) > 0 {
		p = prefix[0]
	}
	var cfg WakatimeConfig
	err := envconfig.Process(p, &cfg)
	return cfg, err
}

// MustReadWakatimeConfig reads WakatimeConfig from env, panic if error
func MustReadWakatimeConfig(prefix ...string) WakatimeConfig {
	cfg, err := ReadWakatimeConfig(prefix...)
	if err != nil {
		log.Fatal().Err(err).Send()
	}
	return cfg
}

// ReadLogConfig reads LogConfig from env
func ReadLogConfig(prefix ...string) (LogConfig, error) {
	p := ""
	if len(prefix) > 0 {
		p = prefix[0]
	}
	var cfg LogConfig
	err := envconfig.Process(p, &cfg)
	return cfg, err
}

// MustReadLogConfig reads LogConfig from env, panic if error
func MustReadLogConfig(prefix ...string) LogConfig {
	cfg, err := ReadLogConfig(prefix...)
	if err != nil {
		log.Fatal().Err(err).Send()
	}
	return cfg
}

// ReadApiConfig reads ApiConfig from env
func ReadApiConfig(prefix ...string) (ApiConfig, error) {
	p := ""
	if len(prefix) > 0 {
		p = prefix[0]
	}
	var cfg ApiConfig
	err := envconfig.Process(p, &cfg)
	return cfg, err
}

// MustReadApiConfig reads ApiConfig from env, panic if error
func MustReadApiConfig(prefix ...string) ApiConfig {
	cfg, err := ReadApiConfig(prefix...)
	if err != nil {
		log.Fatal().Err(err).Send()
	}
	return cfg
}

// ReadGoogleDocsConfig reads GoogleDocsConfig from env
func ReadGoogleDocsConfig(prefix ...string) (GoogleDocsConfig, error) {
	p := ""
	if len(prefix) > 0 {
		p = prefix[0]
	}
	var cfg GoogleDocsConfig
	err := envconfig.Process(p, &cfg)
	return cfg, err
}

// MustReadGoogleDocsConfig reads GoogleDocsConfig from env, panic if error
func MustReadGoogleDocsConfig(prefix ...string) GoogleDocsConfig {
	cfg, err := ReadGoogleDocsConfig(prefix...)
	if err != nil {
		log.Fatal().Err(err).Send()
	}
	return cfg
}

// ReadPostgresConfig reads PostgresConfig from env
func ReadPostgresConfig(prefix ...string) (PostgresConfig, error) {
	p := ""
	if len(prefix) > 0 {
		p = prefix[0]
	}
	var cfg PostgresConfig
	err := envconfig.Process(p, &cfg)
	return cfg, err
}

// MustReadPostgresConfig reads PostgresConfig from env, panic if error
func MustReadPostgresConfig(prefix ...string) PostgresConfig {
	cfg, err := ReadPostgresConfig(prefix...)
	if err != nil {
		log.Fatal().Err(err).Send()
	}
	return cfg
}

// ReadBotConfig reads BotConfig from env
func ReadBotConfig(prefix ...string) (BotConfig, error) {
	p := ""
	if len(prefix) > 0 {
		p = prefix[0]
	}
	var cfg BotConfig
	err := envconfig.Process(p, &cfg)
	return cfg, err
}

// MustReadBotConfig reads BotConfig from env, panic if error
func MustReadBotConfig(prefix ...string) BotConfig {
	cfg, err := ReadBotConfig(prefix...)
	if err != nil {
		log.Fatal().Err(err).Send()
	}
	return cfg
}

// ReadTelegramConfig reads TelegramConfig from env
func ReadTelegramConfig(prefix ...string) (TelegramConfig, error) {
	p := ""
	if len(prefix) > 0 {
		p = prefix[0]
	}
	var cfg TelegramConfig
	err := envconfig.Process(p, &cfg)
	return cfg, err
}

// MustReadTelegramConfig reads TelegramConfig from env, panic if error
func MustReadTelegramConfig(prefix ...string) TelegramConfig {
	cfg, err := ReadTelegramConfig(prefix...)
	if err != nil {
		log.Fatal().Err(err).Send()
	}
	return cfg
}
